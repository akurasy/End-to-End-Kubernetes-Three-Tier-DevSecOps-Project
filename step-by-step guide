the project steps can be found in this article. but i will like to create my own steps in a more understanding way. 
https://blog.stackademic.com/advanced-end-to-end-devsecops-kubernetes-three-tier-project-using-aws-eks-argocd-prometheus-fbbfdb956d1a

first set up aws uvuntu linux server with t2.large or t2 medium. t2.large is recommended for fast process
goto project application code =====> frontend and copy the content of installation file (.sh ext) to install all dependencies of thios project
login to jenkibns server using the credentails for jenkins
on jenkins, goto manage jenkins, plugs, install the following plugins : aws credentials, Pipeline: AWS Steps, terraform and pipeline: stage view
goto manage jenkins, credential, select global, add credentials, chnage kind to aws credentials, add our access key and secret key, then create.
add another credentials for github. create credentioaals, kind using username and password
use your git username and access key token to create credential for github. use this token for password
goto manage jenkins ===> tools ====> terraform , name the tools, and put the terraform directory path /usr/bin/terraform.

now we are set to deploy our infrastructure

goto the repo where we have our terraform script for eks and oher parameters 

goto create job === pipeline job ==== use pipeline script 
paste the content of the github link https://github.com/akurasy/EKS-Terraform-GitHub-Actions/blob/master/Jenkinsfile
edit to suitable configurations, save and run the job

create a jumpserver inside the just create vpc by jenkins server and attach an admin role crrated via IAM to the jumpserver
the jumpserver will be used to ssh into the eks cluster so we can out kubectl commands.

pls restrict access to this jumpserver and run aws configure on itnusing the access and secret key
install the following on the jumpserver via userdata, aws cli, eksctl, kubectl, helm. use the script in the link below: 
https://github.com/akurasy/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project/blob/master/Jenkins-Server-TF/tools-install.sh

connect to the cluster fromt the jumpserver with the command 

aws eks update-kubeconfig --name dev-medium-eks-cluster --region us-west-2

run the command to test
kubectl get node

now lets configure the loadbalancer since we will be using ingress controller.

Download the policy for the LoadBalancer prerequisite.
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json

Create the IAM policy using the below command
aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json

Create OIDC Provider
eksctl utils associate-iam-oidc-provider --region=us-west-2 --cluster=dev-medium-eks-cluster --approve


Create a Service Account by using below command and replace your account ID with your one
eksctl create iamserviceaccount --cluster=dev-medium-eks-cluster --namespace=kube-system --name=aws-load-balancer-controller --role-name AmazonEKSLoadBalancerControllerRole --attach-policy-arn=arn:aws:iam::878726137682:policy/AWSLoadBalancerControllerIAMPolicy --approve --region=us-west-2

run the command below to deploy the load balancer with helm.
helm repo add eks https://aws.github.io/eks-charts
helm repo update eks
helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=dev-medium-eks-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller

next we set up argocd. create a namespace with the command 
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.7/manifests/install.yaml














